plugins {
	id 'java'
  id 'application'
	id 'org.springframework.boot' version '2.7.5'
	id 'io.spring.dependency-management' version '1.0.15.RELEASE'
  id 'com.github.johnrengelman.shadow' version '5.2.0'
}

def WEB_BUILD_ENV           = System.getenv("WEB_BUILD_ENV") ?: 'dev'
def WEB_DEPLOY_SVC_IMAGE    = System.getenv("WEB_DEPLOY_SVC_IMAGE")
def WEB_DEPLOY_SVC_CLOUDRUN = System.getenv("WEB_DEPLOY_SVC_CLOUDRUN")
def svcCredentialProvider   = hasProperty("env.${WEB_BUILD_ENV}.svcCredentialProvider") ? property("env.${WEB_BUILD_ENV}.svcCredentialProvider") : null
def svcCredentialSrc        = hasProperty("env.${WEB_BUILD_ENV}.svcCredentialSrc")      ? property("env.${WEB_BUILD_ENV}.svcCredentialSrc")      : null
def svcCredentialDst        = hasProperty("env.${WEB_BUILD_ENV}.svcCredentialDst")      ? property("env.${WEB_BUILD_ENV}.svcCredentialDst")      : 'src/main/resources/web-based-gtfs-validator-a088ec5f045d.json'

jar {
    // Add the manifest within the JAR, using gtfs-validator as the title
    manifest {
        attributes('Implementation-Title': rootProject.name,
                'Implementation-Version': project.version,
                'Main-Class': 'org.mobilitydata.gtfsvalidator.web.service.Main',
                'Multi-Release': 'true')
    }
}

shadowJar {
    minimize {
        // Validator classes are loaded dynamically from the main project, so we exclude the project
        // from minimization.
        exclude(project(':main'))
        exclude(dependency('org.apache.httpcomponents:httpclient'))
    }
    // Change the JAR name from 'main' to 'gtfs-validator'
    archiveBaseName = rootProject.name
    // Change the JAR suffix from 'all' to 'web'
    archiveClassifier = 'web'
}

mainClassName = 'org.mobilitydata.gtfsvalidator.web.service.Main'

ext {
	set('springCloudGcpVersion', "3.4.0")
	set('springCloudVersion', "2021.0.5")
}

dependencies {
  compileOnly 'org.projectlombok:lombok:1.18.24'
  annotationProcessor 'org.projectlombok:lombok:1.18.24'

  testCompileOnly 'org.projectlombok:lombok:1.18.24'
  testAnnotationProcessor 'org.projectlombok:lombok:1.18.24'
  implementation project(':core')
  implementation project(':main')  
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'com.google.cloud:spring-cloud-gcp-starter'
	implementation 'com.google.cloud:spring-cloud-gcp-starter-storage'
  implementation 'org.projectlombok:lombok:1.18.22'
  implementation 'org.projectlombok:lombok:1.18.22'
  implementation 'io.sentry:sentry-spring:1.7.30'
  testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

dependencyManagement {
	imports {
		mavenBom "com.google.cloud:spring-cloud-gcp-dependencies:${springCloudGcpVersion}"
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

tasks.named('test') {
	useJUnitPlatform()
}

task webSecrets (type: Exec) {

  def required_missing = []
  if (svcCredentialProvider == null) required_missing.add("env.${WEB_BUILD_ENV}.svcCredentialProvider")
  if (svcCredentialSrc == null) required_missing.add("env.${WEB_BUILD_ENV}.svcCredentialSrc")
  if (required_missing.size > 0) {
    commandLine 'echo', 'SKIP: webSecrets: missing required project properties:', required_missing.join(', ')
    return
  }

  inputs.property('svcCredentialProvider', svcCredentialProvider)
  inputs.property('svcCredentialSrc', svcCredentialSrc)
  outputs.file(file(svcCredentialDst))

  switch (svcCredentialProvider) {
    case "gcloud-secrets":
      commandLine (
        'gcloud',
        '--verbosity=info',
        'secrets',
        'versions',
        'access',
        'latest',
        "--secret=${svcCredentialSrc}",
        "--out-file=${svcCredentialDst}"
      )
      break
    default:
      commandLine 'echo', "SKIP: webSecrets: unsupported svcCredentialProvider: ${svcCredentialProvider}"
      break
  }

}

task webTest {
  dependsOn   webSecrets
  finalizedBy test
}

task webBuild {
  dependsOn   webSecrets
  finalizedBy build
}

task webDeploy (type: Exec) {

  def required_missing = []
  if (WEB_DEPLOY_SVC_IMAGE == null)        required_missing.add('WEB_DEPLOY_SVC_IMAGE')
  if (WEB_DEPLOY_SVC_CLOUDRUN == null) required_missing.add('WEB_DEPLOY_SVC_CLOUDRUN')
  if (required_missing.size > 0) {
    commandLine 'echo', 'SKIP: webDeploy: missing required environment variables:', required_missing.join(', ')
    return
  }

  dependsOn webBuild
  commandLine (
    'gcloud',
    'builds',
    'submit',
    "--substitutions=_WEB_DEPLOY_SVC_IMAGE=${WEB_DEPLOY_SVC_IMAGE},_WEB_DEPLOY_SVC_CLOUDRUN=${WEB_DEPLOY_SVC_CLOUDRUN},_CURRENT_VERSION=${project.version}"
  )

}
